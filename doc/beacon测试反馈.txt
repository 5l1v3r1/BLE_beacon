1）每次安装上电池后，电池灯闪烁2下（和原来软件的3下做个区分），并且进入开机以及广播状态。这样量产时刷机的时候，工人可以迅速判断刷机成功的完成了（看到闪灯后表示正确的刷完了）。并且忘记某个beacon是否刷机了，放上制具后，刷过的可以看到闪2下灯。默认开机广播，则是后续量产测试射频部分的时候，放入电池就可以直接测试射频。测试完毕，安装外壳、包装就行。beacon会自行关机的。

2）关机状态下，按键被按下，闪灯2下。可以分辨上电处于待机下，还是坏的，还是没电池的，还是没刷机的。

3）OFF_SCAN的时间，单位改成（100ms），这样最大值就limit到6553.6秒了，也就是1.8小时。可以防止误操作。

4）收到开机的命令后，beacon在开机之前，先设置自己的OFF_SCAN的时间为7秒（5秒sleep+2秒scan），然后再开机。哪怕之前off的时候默认的off scan时间是65536，开机后的beacon的off scan的时间都是定死在“70”。

5）传染的时候，关机倒计时的Timer，reset到30分。不要copy别人的倒计时。越copy越同步... （配置的版本Index要copy）

6）开机的时候，不接受任何配置和命令。配置和命令的部分，不管基站以及其它beacon发的是什么，一概都忽略。传染的时候也不copy配置，只copy配置版本的index。

7）开机的时候，关机倒计时timer，锁定在30分钟，scan的周期锁定在10分钟。配置段可以保留，留作将来用或者将来别的配置项用。

8）CRC部分，MAC的首字节，同一个vender都是一样的，用首字节就有点浪费校验字段了（因为我们beacon和基站都是TI的芯片，首字节永远是固定的）。如果运算量不大的话，可以考虑 用MAC的6个字节的checkSUM得到的一个Byte做校验。不需要每个包都做checksum，而是先查表，查到有效的配置的时候，在执行reset timer之前，checksum校验一次。不匹配的话就找第二候选人，再校验（第二候选人找起来麻烦的话，可以重新执行一次scan的动作）。

9）beacon没电的处理？ 可以考虑，1) beacon的off scan时间被修改了后，以及2) beacon从off scan状态切换到on_adv的时候，以及3）放入电池的时候，电池电压如果低于2.7V，则闪没电的灯。快闪3下，周期5秒，闪10分钟？之前是啥逻辑，忘记了。

10) 倒计时到期后，进入off fast scan的状态后，老胡说10个beacon的led灯，有非常微弱的亮光。应该是GPIO没有设置成低？

// 
11) POWER_ON OFF_SCAN打死到5s，新加一个DUMMY_CMD（如果在ON_SCAN，OFF_SCAN，跟新OFF_SCAN_INTERVAL）
12) 开机默认广播状态，装电池+刷机+RESET：1）低电量检测，2）闪灯2下，3）进入广播状态
13) 新加一个CHECK_BATTERY命令，只有在OFF_SCAN起作用，之前的低电量闪灯。
14) LED的IO取反。P1_3
15)	倒计时关机，存stationIndex，OFF_SCAN的情况下，判断其他beacon的stationIndex.
16) CRC修改，checksum+random byte。
17) MAC地址指定命令！